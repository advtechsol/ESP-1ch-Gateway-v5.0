#include "heltec_oled.h"

#include <algorithm>
#include <cstring>

namespace {

constexpr uint8_t kDisplayWidth = 128;
constexpr uint8_t kDisplayHeight = 64;
constexpr size_t kBufferSize = (kDisplayWidth * kDisplayHeight) / 8;

// Classic 5x7 font for ASCII 32..127
const uint8_t kFont5x7[96][5] = {
    {0x00,0x00,0x00,0x00,0x00}, // ' '
    {0x00,0x00,0x5F,0x00,0x00}, // '!'
    {0x00,0x07,0x00,0x07,0x00}, // '"'
    {0x14,0x7F,0x14,0x7F,0x14}, // '#'
    {0x24,0x2A,0x7F,0x2A,0x12}, // '$'
    {0x23,0x13,0x08,0x64,0x62}, // '%'
    {0x36,0x49,0x55,0x22,0x50}, // '&'
    {0x00,0x05,0x03,0x00,0x00}, // '''
    {0x00,0x1C,0x22,0x41,0x00}, // '('
    {0x00,0x41,0x22,0x1C,0x00}, // ')'
    {0x14,0x08,0x3E,0x08,0x14}, // '*'
    {0x08,0x08,0x3E,0x08,0x08}, // '+'
    {0x00,0x50,0x30,0x00,0x00}, // ','
    {0x08,0x08,0x08,0x08,0x08}, // '-'
    {0x00,0x60,0x60,0x00,0x00}, // '.'
    {0x20,0x10,0x08,0x04,0x02}, // '/'
    {0x3E,0x51,0x49,0x45,0x3E}, // '0'
    {0x00,0x42,0x7F,0x40,0x00}, // '1'
    {0x42,0x61,0x51,0x49,0x46}, // '2'
    {0x21,0x41,0x45,0x4B,0x31}, // '3'
    {0x18,0x14,0x12,0x7F,0x10}, // '4'
    {0x27,0x45,0x45,0x45,0x39}, // '5'
    {0x3C,0x4A,0x49,0x49,0x30}, // '6'
    {0x01,0x71,0x09,0x05,0x03}, // '7'
    {0x36,0x49,0x49,0x49,0x36}, // '8'
    {0x06,0x49,0x49,0x29,0x1E}, // '9'
    {0x00,0x36,0x36,0x00,0x00}, // ':'
    {0x00,0x56,0x36,0x00,0x00}, // ';'
    {0x08,0x14,0x22,0x41,0x00}, // '<'
    {0x14,0x14,0x14,0x14,0x14}, // '='
    {0x00,0x41,0x22,0x14,0x08}, // '>'
    {0x02,0x01,0x51,0x09,0x06}, // '?'
    {0x32,0x49,0x79,0x41,0x3E}, // '@'
    {0x7E,0x11,0x11,0x11,0x7E}, // 'A'
    {0x7F,0x49,0x49,0x49,0x36}, // 'B'
    {0x3E,0x41,0x41,0x41,0x22}, // 'C'
    {0x7F,0x41,0x41,0x22,0x1C}, // 'D'
    {0x7F,0x49,0x49,0x49,0x41}, // 'E'
    {0x7F,0x09,0x09,0x09,0x01}, // 'F'
    {0x3E,0x41,0x49,0x49,0x7A}, // 'G'
    {0x7F,0x08,0x08,0x08,0x7F}, // 'H'
    {0x00,0x41,0x7F,0x41,0x00}, // 'I'
    {0x20,0x40,0x41,0x3F,0x01}, // 'J'
    {0x7F,0x08,0x14,0x22,0x41}, // 'K'
    {0x7F,0x40,0x40,0x40,0x40}, // 'L'
    {0x7F,0x02,0x0C,0x02,0x7F}, // 'M'
    {0x7F,0x04,0x08,0x10,0x7F}, // 'N'
    {0x3E,0x41,0x41,0x41,0x3E}, // 'O'
    {0x7F,0x09,0x09,0x09,0x06}, // 'P'
    {0x3E,0x41,0x51,0x21,0x5E}, // 'Q'
    {0x7F,0x09,0x19,0x29,0x46}, // 'R'
    {0x46,0x49,0x49,0x49,0x31}, // 'S'
    {0x01,0x01,0x7F,0x01,0x01}, // 'T'
    {0x3F,0x40,0x40,0x40,0x3F}, // 'U'
    {0x1F,0x20,0x40,0x20,0x1F}, // 'V'
    {0x7F,0x20,0x18,0x20,0x7F}, // 'W'
    {0x63,0x14,0x08,0x14,0x63}, // 'X'
    {0x07,0x08,0x70,0x08,0x07}, // 'Y'
    {0x61,0x51,0x49,0x45,0x43}, // 'Z'
    {0x00,0x7F,0x41,0x41,0x00}, // '['
    {0x02,0x04,0x08,0x10,0x20}, // '\\'
    {0x00,0x41,0x41,0x7F,0x00}, // ']'
    {0x04,0x02,0x01,0x02,0x04}, // '^'
    {0x80,0x80,0x80,0x80,0x80}, // '_'
    {0x00,0x03,0x05,0x00,0x00}, // '`'
    {0x20,0x54,0x54,0x54,0x78}, // 'a'
    {0x7F,0x48,0x44,0x44,0x38}, // 'b'
    {0x38,0x44,0x44,0x44,0x20}, // 'c'
    {0x38,0x44,0x44,0x48,0x7F}, // 'd'
    {0x38,0x54,0x54,0x54,0x18}, // 'e'
    {0x08,0x7E,0x09,0x01,0x02}, // 'f'
    {0x0C,0x52,0x52,0x52,0x3E}, // 'g'
    {0x7F,0x08,0x04,0x04,0x78}, // 'h'
    {0x00,0x44,0x7D,0x40,0x00}, // 'i'
    {0x20,0x40,0x44,0x3D,0x00}, // 'j'
    {0x7F,0x10,0x28,0x44,0x00}, // 'k'
    {0x00,0x41,0x7F,0x40,0x00}, // 'l'
    {0x7C,0x04,0x18,0x04,0x78}, // 'm'
    {0x7C,0x08,0x04,0x04,0x78}, // 'n'
    {0x38,0x44,0x44,0x44,0x38}, // 'o'
    {0x7C,0x14,0x14,0x14,0x08}, // 'p'
    {0x08,0x14,0x14,0x18,0x7C}, // 'q'
    {0x7C,0x08,0x04,0x04,0x08}, // 'r'
    {0x48,0x54,0x54,0x54,0x20}, // 's'
    {0x04,0x3F,0x44,0x40,0x20}, // 't'
    {0x3C,0x40,0x40,0x20,0x7C}, // 'u'
    {0x1C,0x20,0x40,0x20,0x1C}, // 'v'
    {0x3C,0x40,0x30,0x40,0x3C}, // 'w'
    {0x44,0x28,0x10,0x28,0x44}, // 'x'
    {0x0C,0x50,0x50,0x50,0x3C}, // 'y'
    {0x44,0x64,0x54,0x4C,0x44}, // 'z'
    {0x00,0x08,0x36,0x41,0x00}, // '{'
    {0x00,0x00,0x7F,0x00,0x00}, // '|'
    {0x00,0x41,0x36,0x08,0x00}, // '}'
    {0x08,0x04,0x08,0x10,0x08}, // '~'
    {0x00,0x00,0x00,0x00,0x00}  // DEL (unused)
};

constexpr uint8_t kFontBaseWidth = 5;
constexpr uint8_t kFontBaseHeight = 7;
constexpr uint8_t kFontSpacing = 1;

} // namespace

const HeltecFont Heltec_Arial16 = {kFontBaseWidth, kFontBaseHeight, 2};
const HeltecFont Heltec_Arial24 = {kFontBaseWidth, kFontBaseHeight, 3};

HeltecSSD1306::HeltecSSD1306(uint8_t address, int sdaPin, int sclPin, int rstPin)
    : address_(address), sda_(sdaPin), scl_(sclPin), rst_(rstPin) {
    memset(buffer_, 0, sizeof(buffer_));
}

bool HeltecSSD1306::init() {
    if (initialized_) {
        return true;
    }

    Wire.begin(sda_, scl_);
    Wire.setClock(400000);

    if (rst_ >= 0) {
        pinMode(rst_, OUTPUT);
        digitalWrite(rst_, LOW);
        delay(10);
        digitalWrite(rst_, HIGH);
    }

    writeCommand(0xAE); // display off
    writeCommand(0xD5); // clock divide ratio
    writeCommand(0x80);
    writeCommand(0xA8); // multiplex ratio
    writeCommand(0x3F);
    writeCommand(0xD3); // display offset
    writeCommand(0x00);
    writeCommand(0x40); // start line
    writeCommand(0x8D); // charge pump
    writeCommand(0x14);
    writeCommand(0x20); // memory addressing mode
    writeCommand(0x00); // horizontal addressing mode
    writeCommand(0xA1); // segment remap
    writeCommand(0xC8); // COM scan direction
    writeCommand(0xDA); // COM pins hardware config
    writeCommand(0x12);
    writeCommand(0x81); // contrast control
    writeCommand(0x8F);
    writeCommand(0xD9); // pre-charge period
    writeCommand(0xF1);
    writeCommand(0xDB); // VCOMH deselect level
    writeCommand(0x40);
    writeCommand(0xA4); // resume display
    writeCommand(0xA6); // normal display
    writeCommand(0x2E); // deactivate scroll

    initialized_ = true;

    clear();
    display();
    displayOn();
    return true;
}

void HeltecSSD1306::flipScreenVertically() {
    flipVertical_ = !flipVertical_;
    writeCommand(flipVertical_ ? 0xC0 : 0xC8);
    writeCommand(flipVertical_ ? 0xA0 : 0xA1);
}

void HeltecSSD1306::setFont(const HeltecFont *font) {
    if (!font) {
        return;
    }
    fontScale_ = font->scale == 0 ? 1 : font->scale;
}

void HeltecSSD1306::setTextAlignment(HeltecTextAlignment alignment) {
    alignment_ = alignment;
}

void HeltecSSD1306::clear() {
    memset(buffer_, 0, sizeof(buffer_));
}

void HeltecSSD1306::display() {
    if (!initialized_) {
        return;
    }

    writeCommand(0x21); // column address
    writeCommand(0x00);
    writeCommand(kDisplayWidth - 1);

    writeCommand(0x22); // page address
    writeCommand(0x00);
    writeCommand((kDisplayHeight / 8) - 1);

    size_t sent = 0;
    while (sent < kBufferSize) {
        Wire.beginTransmission(address_);
        Wire.write(0x40);
        uint8_t batch = static_cast<uint8_t>(std::min<size_t>(16, kBufferSize - sent));
        for (uint8_t i = 0; i < batch; ++i) {
            Wire.write(buffer_[sent++]);
        }
        Wire.endTransmission();
    }
}

void HeltecSSD1306::drawString(int16_t x, int16_t y, const String &text) {
    if (!initialized_) {
        return;
    }

    int16_t cursorX = x;
    if (alignment_ != TEXT_ALIGN_LEFT) {
        int16_t charWidth = (kFontBaseWidth + kFontSpacing) * fontScale_;
        int16_t totalWidth = charWidth * text.length();
        if (alignment_ == TEXT_ALIGN_CENTER) {
            cursorX -= totalWidth / 2;
        } else if (alignment_ == TEXT_ALIGN_RIGHT) {
            cursorX -= totalWidth;
        }
    }

    for (size_t i = 0; i < static_cast<size_t>(text.length()); ++i) {
        drawChar(cursorX, y, text.charAt(i));
        cursorX += (kFontBaseWidth + kFontSpacing) * fontScale_;
    }
}

void HeltecSSD1306::displayOn() {
    writeCommand(0xAF);
}

void HeltecSSD1306::displayOff() {
    writeCommand(0xAE);
}

void HeltecSSD1306::drawChar(int16_t x, int16_t y, char c) {
    if (c < 32 || c > 127) {
        c = '?';
    }
    const uint8_t *glyph = kFont5x7[c - 32];

    for (uint8_t col = 0; col < kFontBaseWidth; ++col) {
        uint8_t columnData = glyph[col];
        for (uint8_t row = 0; row < kFontBaseHeight; ++row) {
            bool pixelOn = columnData & (1 << row);
            if (!pixelOn) {
                continue;
            }
            for (uint8_t dx = 0; dx < fontScale_; ++dx) {
                for (uint8_t dy = 0; dy < fontScale_; ++dy) {
                    drawPixel(x + col * fontScale_ + dx,
                              y + row * fontScale_ + dy,
                              true);
                }
            }
        }
    }
}

void HeltecSSD1306::drawPixel(int16_t x, int16_t y, bool on) {
    if (flipVertical_) {
        y = (kDisplayHeight - 1) - y;
    }
    if (x < 0 || x >= kDisplayWidth || y < 0 || y >= kDisplayHeight) {
        return;
    }

    size_t index = x + (y / 8) * kDisplayWidth;
    uint8_t mask = 1 << (y & 0x07);
    if (on) {
        buffer_[index] |= mask;
    } else {
        buffer_[index] &= ~mask;
    }
}

void HeltecSSD1306::writeCommand(uint8_t command) const {
    Wire.beginTransmission(address_);
    Wire.write(0x00);
    Wire.write(command);
    Wire.endTransmission();
}
